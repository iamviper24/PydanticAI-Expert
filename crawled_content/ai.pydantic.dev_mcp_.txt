PydanticAI
pydantic/pydantic-ai
Introduction
Installation
Getting Help
Contributing
Troubleshooting
Upgrade Guide
Documentation
Documentation
Agents
Models
Models
OpenAI
Anthropic
Gemini
Google
Bedrock
Cohere
Groq
Mistral
Dependencies
Function Tools
Common Tools
Output
Messages and chat history
Unit testing
Debugging and Monitoring
Multi-agent Applications
Graphs
Evals
Image, Audio, Video & Document Input
Thinking
Direct Model Requests
MCP
MCP
Client
Server
MCP Run Python
A2A
Command Line Interface (CLI)
Examples
Examples
Pydantic Model
Weather agent
Bank support
SQL Generation
Flight booking
RAG
Stream markdown
Stream whales
Chat App with FastAPI
Question Graph
Slack Lead Qualifier with Modal
API Reference
API Reference
pydantic_ai.agent
pydantic_ai.tools
pydantic_ai.common_tools
pydantic_ai.output
pydantic_ai.result
pydantic_ai.messages
pydantic_ai.exceptions
pydantic_ai.settings
pydantic_ai.usage
pydantic_ai.mcp
pydantic_ai.format_as_xml
pydantic_ai.format_prompt
pydantic_ai.direct
pydantic_ai.models
pydantic_ai.models.openai
pydantic_ai.models.anthropic
pydantic_ai.models.bedrock
pydantic_ai.models.cohere
pydantic_ai.models.gemini
pydantic_ai.models.google
pydantic_ai.models.groq
pydantic_ai.models.instrumented
pydantic_ai.models.mistral
pydantic_ai.models.test
pydantic_ai.models.function
pydantic_ai.models.fallback
pydantic_ai.models.wrapper
pydantic_ai.models.mcp_sampling
pydantic_ai.profiles
pydantic_ai.providers
pydantic_graph
pydantic_graph.nodes
pydantic_graph.persistence
pydantic_graph.mermaid
pydantic_graph.exceptions
pydantic_evals.dataset
pydantic_evals.evaluators
pydantic_evals.reporting
pydantic_evals.otel
pydantic_evals.generation
fasta2a
Table of contents
What is MCP?
MCP Servers
Model Context Protocol (MCP)
PydanticAI supports
Model Context Protocol (MCP)
in three ways:
Agents
act as an MCP Client, connecting to MCP servers to use their tools,
learn more …
Agents can be used within MCP servers,
learn more …
As part of PydanticAI, we're building a number of MCP servers,
see below
What is MCP?
The Model Context Protocol is a standardized protocol that allow AI applications (including programmatic agents like PydanticAI, coding agents like
cursor
, and desktop applications like
Claude Desktop
) to connect to external tools and services using a common interface.
As with other protocols, the dream of MCP is that a wide range of applications can speak to each other without the need for specific integrations.
There is a great list of MCP servers at
github.com/modelcontextprotocol/servers
.
Some examples of what this means:
PydanticAI could use a web search service implemented as an MCP server to implement a deep research agent
Cursor could connect to the
Pydantic Logfire
MCP server to search logs, traces and metrics to gain context while fixing a bug
PydanticAI, or any other MCP client could connect to our
Run Python
MCP server to run arbitrary Python code in a sandboxed environment
MCP Servers
To add functionality to PydanticAI while making it as widely usable as possible, we're implementing some functionality as MCP servers.
So far, we've only implemented one MCP server as part of PydanticAI:
Run Python
: A sandboxed Python interpreter that can run arbitrary code, with a focus on security and safety.