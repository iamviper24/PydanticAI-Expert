PydanticAI
pydantic/pydantic-ai
Introduction
Installation
Getting Help
Contributing
Troubleshooting
Upgrade Guide
Documentation
Documentation
Agents
Models
Models
OpenAI
Anthropic
Gemini
Google
Bedrock
Cohere
Groq
Groq
Table of contents
Install
Configuration
Environment variable
provider argument
Mistral
Dependencies
Function Tools
Common Tools
Output
Messages and chat history
Unit testing
Debugging and Monitoring
Multi-agent Applications
Graphs
Evals
Image, Audio, Video & Document Input
Thinking
Direct Model Requests
MCP
MCP
Client
Server
MCP Run Python
A2A
Command Line Interface (CLI)
Examples
Examples
Pydantic Model
Weather agent
Bank support
SQL Generation
Flight booking
RAG
Stream markdown
Stream whales
Chat App with FastAPI
Question Graph
Slack Lead Qualifier with Modal
API Reference
API Reference
pydantic_ai.agent
pydantic_ai.tools
pydantic_ai.common_tools
pydantic_ai.output
pydantic_ai.result
pydantic_ai.messages
pydantic_ai.exceptions
pydantic_ai.settings
pydantic_ai.usage
pydantic_ai.mcp
pydantic_ai.format_as_xml
pydantic_ai.format_prompt
pydantic_ai.direct
pydantic_ai.models
pydantic_ai.models.openai
pydantic_ai.models.anthropic
pydantic_ai.models.bedrock
pydantic_ai.models.cohere
pydantic_ai.models.gemini
pydantic_ai.models.google
pydantic_ai.models.groq
pydantic_ai.models.instrumented
pydantic_ai.models.mistral
pydantic_ai.models.test
pydantic_ai.models.function
pydantic_ai.models.fallback
pydantic_ai.models.wrapper
pydantic_ai.models.mcp_sampling
pydantic_ai.profiles
pydantic_ai.providers
pydantic_graph
pydantic_graph.nodes
pydantic_graph.persistence
pydantic_graph.mermaid
pydantic_graph.exceptions
pydantic_evals.dataset
pydantic_evals.evaluators
pydantic_evals.reporting
pydantic_evals.otel
pydantic_evals.generation
fasta2a
Table of contents
Install
Configuration
Environment variable
provider argument
Groq
Install
To use
GroqModel
, you need to either install
pydantic-ai
, or install
pydantic-ai-slim
with the
groq
optional group:
pip
uv
pip
install
"pydantic-ai-slim[groq]"
uv
add
"pydantic-ai-slim[groq]"
Configuration
To use
Groq
through their API, go to
console.groq.com/keys
and follow your nose until you find the place to generate an API key.
GroqModelName
contains a list of available Groq models.
Environment variable
Once you have the API key, you can set it as an environment variable:
export
GROQ_API_KEY
=
'your-api-key'
You can then use
GroqModel
by name:
from
pydantic_ai
import
Agent
agent
=
Agent
(
'groq:llama-3.3-70b-versatile'
)
...
Or initialise the model directly with just the model name:
from
pydantic_ai
import
Agent
from
pydantic_ai.models.groq
import
GroqModel
model
=
GroqModel
(
'llama-3.3-70b-versatile'
)
agent
=
Agent
(
model
)
...
provider
argument
You can provide a custom
Provider
via the
provider
argument:
from
pydantic_ai
import
Agent
from
pydantic_ai.models.groq
import
GroqModel
from
pydantic_ai.providers.groq
import
GroqProvider
model
=
GroqModel
(
'llama-3.3-70b-versatile'
,
provider
=
GroqProvider
(
api_key
=
'your-api-key'
)
)
agent
=
Agent
(
model
)
...
You can also customize the
GroqProvider
with a custom
httpx.AsyncHTTPClient
:
from
httpx
import
AsyncClient
from
pydantic_ai
import
Agent
from
pydantic_ai.models.groq
import
GroqModel
from
pydantic_ai.providers.groq
import
GroqProvider
custom_http_client
=
AsyncClient
(
timeout
=
30
)
model
=
GroqModel
(
'llama-3.3-70b-versatile'
,
provider
=
GroqProvider
(
api_key
=
'your-api-key'
,
http_client
=
custom_http_client
),
)
agent
=
Agent
(
model
)
...