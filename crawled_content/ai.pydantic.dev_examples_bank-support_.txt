PydanticAI
pydantic/pydantic-ai
Introduction
Installation
Getting Help
Contributing
Troubleshooting
Upgrade Guide
Documentation
Documentation
Agents
Models
Models
OpenAI
Anthropic
Gemini
Google
Bedrock
Cohere
Groq
Mistral
Dependencies
Function Tools
Common Tools
Output
Messages and chat history
Unit testing
Debugging and Monitoring
Multi-agent Applications
Graphs
Evals
Image, Audio, Video & Document Input
Thinking
Direct Model Requests
MCP
MCP
Client
Server
MCP Run Python
A2A
Command Line Interface (CLI)
Examples
Examples
Pydantic Model
Weather agent
Bank support
Bank support
Table of contents
Running the Example
Example Code
SQL Generation
Flight booking
RAG
Stream markdown
Stream whales
Chat App with FastAPI
Question Graph
Slack Lead Qualifier with Modal
API Reference
API Reference
pydantic_ai.agent
pydantic_ai.tools
pydantic_ai.common_tools
pydantic_ai.output
pydantic_ai.result
pydantic_ai.messages
pydantic_ai.exceptions
pydantic_ai.settings
pydantic_ai.usage
pydantic_ai.mcp
pydantic_ai.format_as_xml
pydantic_ai.format_prompt
pydantic_ai.direct
pydantic_ai.models
pydantic_ai.models.openai
pydantic_ai.models.anthropic
pydantic_ai.models.bedrock
pydantic_ai.models.cohere
pydantic_ai.models.gemini
pydantic_ai.models.google
pydantic_ai.models.groq
pydantic_ai.models.instrumented
pydantic_ai.models.mistral
pydantic_ai.models.test
pydantic_ai.models.function
pydantic_ai.models.fallback
pydantic_ai.models.wrapper
pydantic_ai.models.mcp_sampling
pydantic_ai.profiles
pydantic_ai.providers
pydantic_graph
pydantic_graph.nodes
pydantic_graph.persistence
pydantic_graph.mermaid
pydantic_graph.exceptions
pydantic_evals.dataset
pydantic_evals.evaluators
pydantic_evals.reporting
pydantic_evals.otel
pydantic_evals.generation
fasta2a
Table of contents
Running the Example
Example Code
Bank support
Small but complete example of using PydanticAI to build a support agent for a bank.
Demonstrates:
dynamic system prompt
structured
output_type
tools
Running the Example
With
dependencies installed and environment variables set
, run:
pip
uv
python
-m
pydantic_ai_examples.bank_support
uv
run
-m
pydantic_ai_examples.bank_support
(or
PYDANTIC_AI_MODEL=gemini-1.5-flash ...
)
Example Code
bank_support.py
"""Small but complete example of using PydanticAI to build a support agent for a bank.
Run with:
uv run -m pydantic_ai_examples.bank_support
"""
from
dataclasses
import
dataclass
from
pydantic
import
BaseModel
,
Field
from
pydantic_ai
import
Agent
,
RunContext
class
DatabaseConn
:
"""This is a fake database for example purposes.
In reality, you'd be connecting to an external database
(e.g. PostgreSQL) to get information about customers.
"""
@classmethod
async
def
customer_name
(
cls
,
*
,
id
:
int
)
->
str
|
None
:
if
id
==
123
:
return
'John'
@classmethod
async
def
customer_balance
(
cls
,
*
,
id
:
int
,
include_pending
:
bool
)
->
float
:
if
id
==
123
:
if
include_pending
:
return
123.45
else
:
return
100.00
else
:
raise
ValueError
(
'Customer not found'
)
@dataclass
class
SupportDependencies
:
customer_id
:
int
db
:
DatabaseConn
class
SupportOutput
(
BaseModel
):
support_advice
:
str
=
Field
(
description
=
'Advice returned to the customer'
)
block_card
:
bool
=
Field
(
description
=
'Whether to block their card or not'
)
risk
:
int
=
Field
(
description
=
'Risk level of query'
,
ge
=
0
,
le
=
10
)
support_agent
=
Agent
(
'openai:gpt-4o'
,
deps_type
=
SupportDependencies
,
output_type
=
SupportOutput
,
system_prompt
=
(
'You are a support agent in our bank, give the '
'customer support and judge the risk level of their query. '
"Reply using the customer's name."
),
)
@support_agent
.
system_prompt
async
def
add_customer_name
(
ctx
:
RunContext
[
SupportDependencies
])
->
str
:
customer_name
=
await
ctx
.
deps
.
db
.
customer_name
(
id
=
ctx
.
deps
.
customer_id
)
return
f
"The customer's name is
{
customer_name
!r}
"
@support_agent
.
tool
async
def
customer_balance
(
ctx
:
RunContext
[
SupportDependencies
],
include_pending
:
bool
)
->
str
:
"""Returns the customer's current account balance."""
balance
=
await
ctx
.
deps
.
db
.
customer_balance
(
id
=
ctx
.
deps
.
customer_id
,
include_pending
=
include_pending
,
)
return
f
'$
{
balance
:
.2f
}
'
if
__name__
==
'__main__'
:
deps
=
SupportDependencies
(
customer_id
=
123
,
db
=
DatabaseConn
())
result
=
support_agent
.
run_sync
(
'What is my balance?'
,
deps
=
deps
)
print
(
result
.
output
)
"""
support_advice='Hello John, your current account balance, including pending transactions, is $123.45.' block_card=False risk=1
"""
result
=
support_agent
.
run_sync
(
'I just lost my card!'
,
deps
=
deps
)
print
(
result
.
output
)
"""
support_advice="I'm sorry to hear that, John. We are temporarily blocking your card to prevent unauthorized transactions." block_card=True risk=8
"""