PydanticAI
pydantic/pydantic-ai
Introduction
Installation
Getting Help
Contributing
Troubleshooting
Upgrade Guide
Documentation
Documentation
Agents
Models
Models
OpenAI
Anthropic
Gemini
Google
Bedrock
Cohere
Groq
Mistral
Dependencies
Function Tools
Common Tools
Output
Messages and chat history
Unit testing
Debugging and Monitoring
Multi-agent Applications
Graphs
Evals
Image, Audio, Video & Document Input
Thinking
Direct Model Requests
MCP
MCP
Client
Server
MCP Run Python
A2A
Command Line Interface (CLI)
Examples
Examples
Pydantic Model
Weather agent
Bank support
SQL Generation
Flight booking
RAG
Stream markdown
Stream whales
Chat App with FastAPI
Question Graph
Slack Lead Qualifier with Modal
API Reference
API Reference
pydantic_ai.agent
pydantic_ai.tools
pydantic_ai.common_tools
pydantic_ai.output
pydantic_ai.result
pydantic_ai.messages
pydantic_ai.exceptions
pydantic_ai.settings
pydantic_ai.usage
pydantic_ai.mcp
pydantic_ai.format_as_xml
pydantic_ai.format_prompt
pydantic_ai.direct
pydantic_ai.models
pydantic_ai.models.openai
pydantic_ai.models.openai
Table of contents
Setup
openai
OpenAIModelName
OpenAIModelSettings
openai_reasoning_effort
openai_logprobs
openai_top_logprobs
openai_user
openai_service_tier
openai_prediction
OpenAIResponsesModelSettings
openai_builtin_tools
openai_reasoning_generate_summary
openai_reasoning_summary
openai_truncation
OpenAIModel
__init__
model_name
system
OpenAIResponsesModel
__init__
model_name
system
pydantic_ai.models.anthropic
pydantic_ai.models.bedrock
pydantic_ai.models.cohere
pydantic_ai.models.gemini
pydantic_ai.models.google
pydantic_ai.models.groq
pydantic_ai.models.instrumented
pydantic_ai.models.mistral
pydantic_ai.models.test
pydantic_ai.models.function
pydantic_ai.models.fallback
pydantic_ai.models.wrapper
pydantic_ai.models.mcp_sampling
pydantic_ai.profiles
pydantic_ai.providers
pydantic_graph
pydantic_graph.nodes
pydantic_graph.persistence
pydantic_graph.mermaid
pydantic_graph.exceptions
pydantic_evals.dataset
pydantic_evals.evaluators
pydantic_evals.reporting
pydantic_evals.otel
pydantic_evals.generation
fasta2a
Table of contents
Setup
openai
OpenAIModelName
OpenAIModelSettings
openai_reasoning_effort
openai_logprobs
openai_top_logprobs
openai_user
openai_service_tier
openai_prediction
OpenAIResponsesModelSettings
openai_builtin_tools
openai_reasoning_generate_summary
openai_reasoning_summary
openai_truncation
OpenAIModel
__init__
model_name
system
OpenAIResponsesModel
__init__
model_name
system
pydantic_ai.models.openai
Setup
For details on how to set up authentication with this model, see
model configuration for OpenAI
.
OpenAIModelName
module-attribute
OpenAIModelName
=
Union
[
str
,
ChatModel
]
Possible OpenAI model names.
Since OpenAI supports a variety of date-stamped models, we explicitly list the latest models but
allow any name in the type hints.
See
the OpenAI docs
for a full list.
Using this more broad type for the model name instead of the ChatModel definition
allows this model to be used more easily with other model types (ie, Ollama, Deepseek).
OpenAIModelSettings
Bases:
ModelSettings
Settings used for an OpenAI model request.
Source code in
pydantic_ai_slim/pydantic_ai/models/openai.py
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
class
OpenAIModelSettings
(
ModelSettings
,
total
=
False
):
"""Settings used for an OpenAI model request."""
# ALL FIELDS MUST BE `openai_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.
openai_reasoning_effort
:
ReasoningEffort
"""Constrains effort on reasoning for [reasoning models](https://platform.openai.com/docs/guides/reasoning).
Currently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can
result in faster responses and fewer tokens used on reasoning in a response.
"""
openai_logprobs
:
bool
"""Include log probabilities in the response."""
openai_top_logprobs
:
int
"""Include log probabilities of the top n tokens in the response."""
openai_user
:
str
"""A unique identifier representing the end-user, which can help OpenAI monitor and detect abuse.
See [OpenAI's safety best practices](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids) for more details.
"""
openai_service_tier
:
Literal
[
'auto'
,
'default'
,
'flex'
]
"""The service tier to use for the model request.
Currently supported values are `auto`, `default`, and `flex`.
For more information, see [OpenAI's service tiers documentation](https://platform.openai.com/docs/api-reference/chat/object#chat/object-service_tier).
"""
openai_prediction
:
ChatCompletionPredictionContentParam
"""Enables [predictive outputs](https://platform.openai.com/docs/guides/predicted-outputs).
This feature is currently only supported for some OpenAI models.
"""
openai_reasoning_effort
instance-attribute
openai_reasoning_effort
:
ReasoningEffort
Constrains effort on reasoning for
reasoning models
.
Currently supported values are
low
,
medium
, and
high
. Reducing reasoning effort can
result in faster responses and fewer tokens used on reasoning in a response.
openai_logprobs
instance-attribute
openai_logprobs
:
bool
Include log probabilities in the response.
openai_top_logprobs
instance-attribute
openai_top_logprobs
:
int
Include log probabilities of the top n tokens in the response.
openai_user
instance-attribute
openai_user
:
str
A unique identifier representing the end-user, which can help OpenAI monitor and detect abuse.
See
OpenAI's safety best practices
for more details.
openai_service_tier
instance-attribute
openai_service_tier
:
Literal
[
'auto'
,
'default'
,
'flex'
]
The service tier to use for the model request.
Currently supported values are
auto
,
default
, and
flex
.
For more information, see
OpenAI's service tiers documentation
.
openai_prediction
instance-attribute
openai_prediction
:
ChatCompletionPredictionContentParam
Enables
predictive outputs
.
This feature is currently only supported for some OpenAI models.
OpenAIResponsesModelSettings
Bases:
OpenAIModelSettings
Settings used for an OpenAI Responses model request.
ALL FIELDS MUST BE
openai_
PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.
Source code in
pydantic_ai_slim/pydantic_ai/models/openai.py
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
class
OpenAIResponsesModelSettings
(
OpenAIModelSettings
,
total
=
False
):
"""Settings used for an OpenAI Responses model request.
ALL FIELDS MUST BE `openai_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.
"""
openai_builtin_tools
:
Sequence
[
FileSearchToolParam
|
WebSearchToolParam
|
ComputerToolParam
]
"""The provided OpenAI built-in tools to use.
See [OpenAI's built-in tools](https://platform.openai.com/docs/guides/tools?api-mode=responses) for more details.
"""
openai_reasoning_generate_summary
:
Literal
[
'detailed'
,
'concise'
]
"""Deprecated alias for `openai_reasoning_summary`."""
openai_reasoning_summary
:
Literal
[
'detailed'
,
'concise'
]
"""A summary of the reasoning performed by the model.
This can be useful for debugging and understanding the model's reasoning process.
One of `concise` or `detailed`.
Check the [OpenAI Computer use documentation](https://platform.openai.com/docs/guides/tools-computer-use#1-send-a-request-to-the-model)
for more details.
"""
openai_truncation
:
Literal
[
'disabled'
,
'auto'
]
"""The truncation strategy to use for the model response.
It can be either:
- `disabled` (default): If a model response will exceed the context window size for a model, the
request will fail with a 400 error.
- `auto`: If the context of this response and previous ones exceeds the model's context window size,
the model will truncate the response to fit the context window by dropping input items in the
middle of the conversation.
"""
openai_builtin_tools
instance-attribute
openai_builtin_tools
:
Sequence
[
FileSearchToolParam
|
WebSearchToolParam
|
ComputerToolParam
]
The provided OpenAI built-in tools to use.
See
OpenAI's built-in tools
for more details.
openai_reasoning_generate_summary
instance-attribute
openai_reasoning_generate_summary
:
Literal
[
"detailed"
,
"concise"
]
Deprecated alias for
openai_reasoning_summary
.
openai_reasoning_summary
instance-attribute
openai_reasoning_summary
:
Literal
[
'detailed'
,
'concise'
]
A summary of the reasoning performed by the model.
This can be useful for debugging and understanding the model's reasoning process.
One of
concise
or
detailed
.
Check the
OpenAI Computer use documentation
for more details.
openai_truncation
instance-attribute
openai_truncation
:
Literal
[
'disabled'
,
'auto'
]
The truncation strategy to use for the model response.
It can be either:
-
disabled
(default): If a model response will exceed the context window size for a model, the
    request will fail with a 400 error.
-
auto
: If the context of this response and previous ones exceeds the model's context window size,
    the model will truncate the response to fit the context window by dropping input items in the
    middle of the conversation.
OpenAIModel
dataclass
Bases:
Model
A model that uses the OpenAI API.
Internally, this uses the
OpenAI Python client
to interact with the API.
Apart from
__init__
, all methods are private or match those of the base class.
Source code in
pydantic_ai_slim/pydantic_ai/models/openai.py
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
@dataclass
(
init
=
False
)
class
OpenAIModel
(
Model
):
"""A model that uses the OpenAI API.
Internally, this uses the [OpenAI Python client](https://github.com/openai/openai-python) to interact with the API.
Apart from `__init__`, all methods are private or match those of the base class.
"""
client
:
AsyncOpenAI
=
field
(
repr
=
False
)
system_prompt_role
:
OpenAISystemPromptRole
|
None
=
field
(
default
=
None
,
repr
=
False
)
_model_name
:
OpenAIModelName
=
field
(
repr
=
False
)
_system
:
str
=
field
(
default
=
'openai'
,
repr
=
False
)
def
__init__
(
self
,
model_name
:
OpenAIModelName
,
*
,
provider
:
Literal
[
'openai'
,
'deepseek'
,
'azure'
,
'openrouter'
,
'grok'
,
'fireworks'
,
'together'
,
'heroku'
,
'github'
]
|
Provider
[
AsyncOpenAI
]
=
'openai'
,
profile
:
ModelProfileSpec
|
None
=
None
,
system_prompt_role
:
OpenAISystemPromptRole
|
None
=
None
,
):
"""Initialize an OpenAI model.
Args:
model_name: The name of the OpenAI model to use. List of model names available
[here](https://github.com/openai/openai-python/blob/v1.54.3/src/openai/types/chat_model.py#L7)
(Unfortunately, despite being ask to do so, OpenAI do not provide `.inv` files for their API).
provider: The provider to use. Defaults to `'openai'`.
profile: The model profile to use. Defaults to a profile picked by the provider based on the model name.
system_prompt_role: The role to use for the system prompt message. If not provided, defaults to `'system'`.
In the future, this may be inferred from the model name.
"""
self
.
_model_name
=
model_name
if
isinstance
(
provider
,
str
):
provider
=
infer_provider
(
provider
)
self
.
client
=
provider
.
client
self
.
_profile
=
profile
or
provider
.
model_profile
self
.
system_prompt_role
=
system_prompt_role
@property
def
base_url
(
self
)
->
str
:
return
str
(
self
.
client
.
base_url
)
async
def
request
(
self
,
messages
:
list
[
ModelMessage
],
model_settings
:
ModelSettings
|
None
,
model_request_parameters
:
ModelRequestParameters
,
)
->
ModelResponse
:
check_allow_model_requests
()
response
=
await
self
.
_completions_create
(
messages
,
False
,
cast
(
OpenAIModelSettings
,
model_settings
or
{}),
model_request_parameters
)
model_response
=
self
.
_process_response
(
response
)
model_response
.
usage
.
requests
=
1
return
model_response
@asynccontextmanager
async
def
request_stream
(
self
,
messages
:
list
[
ModelMessage
],
model_settings
:
ModelSettings
|
None
,
model_request_parameters
:
ModelRequestParameters
,
)
->
AsyncIterator
[
StreamedResponse
]:
check_allow_model_requests
()
response
=
await
self
.
_completions_create
(
messages
,
True
,
cast
(
OpenAIModelSettings
,
model_settings
or
{}),
model_request_parameters
)
async
with
response
:
yield
await
self
.
_process_streamed_response
(
response
)
@property
def
model_name
(
self
)
->
OpenAIModelName
:
"""The model name."""
return
self
.
_model_name
@property
def
system
(
self
)
->
str
:
"""The system / model provider."""
return
self
.
_system
@overload
async
def
_completions_create
(
self
,
messages
:
list
[
ModelMessage
],
stream
:
Literal
[
True
],
model_settings
:
OpenAIModelSettings
,
model_request_parameters
:
ModelRequestParameters
,
)
->
AsyncStream
[
ChatCompletionChunk
]:
...
@overload
async
def
_completions_create
(
self
,
messages
:
list
[
ModelMessage
],
stream
:
Literal
[
False
],
model_settings
:
OpenAIModelSettings
,
model_request_parameters
:
ModelRequestParameters
,
)
->
chat
.
ChatCompletion
:
...
async
def
_completions_create
(
self
,
messages
:
list
[
ModelMessage
],
stream
:
bool
,
model_settings
:
OpenAIModelSettings
,
model_request_parameters
:
ModelRequestParameters
,
)
->
chat
.
ChatCompletion
|
AsyncStream
[
ChatCompletionChunk
]:
tools
=
self
.
_get_tools
(
model_request_parameters
)
if
not
tools
:
tool_choice
:
Literal
[
'none'
,
'required'
,
'auto'
]
|
None
=
None
elif
not
model_request_parameters
.
allow_text_output
:
tool_choice
=
'required'
else
:
tool_choice
=
'auto'
openai_messages
=
await
self
.
_map_messages
(
messages
)
response_format
:
chat
.
completion_create_params
.
ResponseFormat
|
None
=
None
if
model_request_parameters
.
output_mode
==
'native'
:
output_object
=
model_request_parameters
.
output_object
assert
output_object
is
not
None
response_format
=
self
.
_map_json_schema
(
output_object
)
elif
(
model_request_parameters
.
output_mode
==
'prompted'
and
self
.
profile
.
supports_json_object_output
):
# pragma: no branch
response_format
=
{
'type'
:
'json_object'
}
sampling_settings
=
(
model_settings
if
OpenAIModelProfile
.
from_profile
(
self
.
profile
)
.
openai_supports_sampling_settings
else
OpenAIModelSettings
()
)
try
:
extra_headers
=
model_settings
.
get
(
'extra_headers'
,
{})
extra_headers
.
setdefault
(
'User-Agent'
,
get_user_agent
())
return
await
self
.
client
.
chat
.
completions
.
create
(
model
=
self
.
_model_name
,
messages
=
openai_messages
,
parallel_tool_calls
=
model_settings
.
get
(
'parallel_tool_calls'
,
NOT_GIVEN
),
tools
=
tools
or
NOT_GIVEN
,
tool_choice
=
tool_choice
or
NOT_GIVEN
,
stream
=
stream
,
stream_options
=
{
'include_usage'
:
True
}
if
stream
else
NOT_GIVEN
,
stop
=
model_settings
.
get
(
'stop_sequences'
,
NOT_GIVEN
),
max_completion_tokens
=
model_settings
.
get
(
'max_tokens'
,
NOT_GIVEN
),
timeout
=
model_settings
.
get
(
'timeout'
,
NOT_GIVEN
),
response_format
=
response_format
or
NOT_GIVEN
,
seed
=
model_settings
.
get
(
'seed'
,
NOT_GIVEN
),
reasoning_effort
=
model_settings
.
get
(
'openai_reasoning_effort'
,
NOT_GIVEN
),
user
=
model_settings
.
get
(
'openai_user'
,
NOT_GIVEN
),
service_tier
=
model_settings
.
get
(
'openai_service_tier'
,
NOT_GIVEN
),
prediction
=
model_settings
.
get
(
'openai_prediction'
,
NOT_GIVEN
),
temperature
=
sampling_settings
.
get
(
'temperature'
,
NOT_GIVEN
),
top_p
=
sampling_settings
.
get
(
'top_p'
,
NOT_GIVEN
),
presence_penalty
=
sampling_settings
.
get
(
'presence_penalty'
,
NOT_GIVEN
),
frequency_penalty
=
sampling_settings
.
get
(
'frequency_penalty'
,
NOT_GIVEN
),
logit_bias
=
sampling_settings
.
get
(
'logit_bias'
,
NOT_GIVEN
),
logprobs
=
sampling_settings
.
get
(
'openai_logprobs'
,
NOT_GIVEN
),
top_logprobs
=
sampling_settings
.
get
(
'openai_top_logprobs'
,
NOT_GIVEN
),
extra_headers
=
extra_headers
,
extra_body
=
model_settings
.
get
(
'extra_body'
),
)
except
APIStatusError
as
e
:
if
(
status_code
:=
e
.
status_code
)
>=
400
:
raise
ModelHTTPError
(
status_code
=
status_code
,
model_name
=
self
.
model_name
,
body
=
e
.
body
)
from
e
raise
# pragma: lax no cover
def
_process_response
(
self
,
response
:
chat
.
ChatCompletion
)
->
ModelResponse
:
"""Process a non-streamed response, and prepare a message to return."""
timestamp
=
number_to_datetime
(
response
.
created
)
choice
=
response
.
choices
[
0
]
items
:
list
[
ModelResponsePart
]
=
[]
# The `reasoning_content` is only present in DeepSeek models.
if
reasoning_content
:=
getattr
(
choice
.
message
,
'reasoning_content'
,
None
):
items
.
append
(
ThinkingPart
(
content
=
reasoning_content
))
vendor_details
:
dict
[
str
,
Any
]
|
None
=
None
# Add logprobs to vendor_details if available
if
choice
.
logprobs
is
not
None
and
choice
.
logprobs
.
content
:
# Convert logprobs to a serializable format
vendor_details
=
{
'logprobs'
:
[
{
'token'
:
lp
.
token
,
'bytes'
:
lp
.
bytes
,
'logprob'
:
lp
.
logprob
,
'top_logprobs'
:
[
{
'token'
:
tlp
.
token
,
'bytes'
:
tlp
.
bytes
,
'logprob'
:
tlp
.
logprob
}
for
tlp
in
lp
.
top_logprobs
],
}
for
lp
in
choice
.
logprobs
.
content
],
}
if
choice
.
message
.
content
is
not
None
:
items
.
extend
(
split_content_into_text_and_thinking
(
choice
.
message
.
content
))
if
choice
.
message
.
tool_calls
is
not
None
:
for
c
in
choice
.
message
.
tool_calls
:
part
=
ToolCallPart
(
c
.
function
.
name
,
c
.
function
.
arguments
,
tool_call_id
=
c
.
id
)
part
.
tool_call_id
=
_guard_tool_call_id
(
part
)
items
.
append
(
part
)
return
ModelResponse
(
items
,
usage
=
_map_usage
(
response
),
model_name
=
response
.
model
,
timestamp
=
timestamp
,
vendor_details
=
vendor_details
,
vendor_id
=
response
.
id
,
)
async
def
_process_streamed_response
(
self
,
response
:
AsyncStream
[
ChatCompletionChunk
])
->
OpenAIStreamedResponse
:
"""Process a streamed response, and prepare a streaming response to return."""
peekable_response
=
_utils
.
PeekableAsyncStream
(
response
)
first_chunk
=
await
peekable_response
.
peek
()
if
isinstance
(
first_chunk
,
_utils
.
Unset
):
raise
UnexpectedModelBehavior
(
# pragma: no cover
'Streamed response ended without content or tool calls'
)
return
OpenAIStreamedResponse
(
_model_name
=
self
.
_model_name
,
_response
=
peekable_response
,
_timestamp
=
number_to_datetime
(
first_chunk
.
created
),
)
def
_get_tools
(
self
,
model_request_parameters
:
ModelRequestParameters
)
->
list
[
chat
.
ChatCompletionToolParam
]:
tools
=
[
self
.
_map_tool_definition
(
r
)
for
r
in
model_request_parameters
.
function_tools
]
if
model_request_parameters
.
output_tools
:
tools
+=
[
self
.
_map_tool_definition
(
r
)
for
r
in
model_request_parameters
.
output_tools
]
return
tools
async
def
_map_messages
(
self
,
messages
:
list
[
ModelMessage
])
->
list
[
chat
.
ChatCompletionMessageParam
]:
"""Just maps a `pydantic_ai.Message` to a `openai.types.ChatCompletionMessageParam`."""
openai_messages
:
list
[
chat
.
ChatCompletionMessageParam
]
=
[]
for
message
in
messages
:
if
isinstance
(
message
,
ModelRequest
):
async
for
item
in
self
.
_map_user_message
(
message
):
openai_messages
.
append
(
item
)
elif
isinstance
(
message
,
ModelResponse
):
texts
:
list
[
str
]
=
[]
tool_calls
:
list
[
chat
.
ChatCompletionMessageToolCallParam
]
=
[]
for
item
in
message
.
parts
:
if
isinstance
(
item
,
TextPart
):
texts
.
append
(
item
.
content
)
elif
isinstance
(
item
,
ThinkingPart
):
# NOTE: We don't send ThinkingPart to the providers yet. If you are unsatisfied with this,
# please open an issue. The below code is the code to send thinking to the provider.
# texts.append(f'<think>\n{item.content}\n</think>')
pass
elif
isinstance
(
item
,
ToolCallPart
):
tool_calls
.
append
(
self
.
_map_tool_call
(
item
))
else
:
assert_never
(
item
)
message_param
=
chat
.
ChatCompletionAssistantMessageParam
(
role
=
'assistant'
)
if
texts
:
# Note: model responses from this model should only have one text item, so the following
# shouldn't merge multiple texts into one unless you switch models between runs:
message_param
[
'content'
]
=
'
\n\n
'
.
join
(
texts
)
if
tool_calls
:
message_param
[
'tool_calls'
]
=
tool_calls
openai_messages
.
append
(
message_param
)
else
:
assert_never
(
message
)
if
instructions
:=
self
.
_get_instructions
(
messages
):
openai_messages
.
insert
(
0
,
chat
.
ChatCompletionSystemMessageParam
(
content
=
instructions
,
role
=
'system'
))
return
openai_messages
@staticmethod
def
_map_tool_call
(
t
:
ToolCallPart
)
->
chat
.
ChatCompletionMessageToolCallParam
:
return
chat
.
ChatCompletionMessageToolCallParam
(
id
=
_guard_tool_call_id
(
t
=
t
),
type
=
'function'
,
function
=
{
'name'
:
t
.
tool_name
,
'arguments'
:
t
.
args_as_json_str
()},
)
def
_map_json_schema
(
self
,
o
:
OutputObjectDefinition
)
->
chat
.
completion_create_params
.
ResponseFormat
:
response_format_param
:
chat
.
completion_create_params
.
ResponseFormatJSONSchema
=
{
# pyright: ignore[reportPrivateImportUsage]
'type'
:
'json_schema'
,
'json_schema'
:
{
'name'
:
o
.
name
or
DEFAULT_OUTPUT_TOOL_NAME
,
'schema'
:
o
.
json_schema
,
'strict'
:
True
},
}
if
o
.
description
:
response_format_param
[
'json_schema'
][
'description'
]
=
o
.
description
if
OpenAIModelProfile
.
from_profile
(
self
.
profile
)
.
openai_supports_strict_tool_definition
:
# pragma: no branch
response_format_param
[
'json_schema'
][
'strict'
]
=
o
.
strict
return
response_format_param
def
_map_tool_definition
(
self
,
f
:
ToolDefinition
)
->
chat
.
ChatCompletionToolParam
:
tool_param
:
chat
.
ChatCompletionToolParam
=
{
'type'
:
'function'
,
'function'
:
{
'name'
:
f
.
name
,
'description'
:
f
.
description
or
''
,
'parameters'
:
f
.
parameters_json_schema
,
},
}
if
f
.
strict
and
OpenAIModelProfile
.
from_profile
(
self
.
profile
)
.
openai_supports_strict_tool_definition
:
tool_param
[
'function'
][
'strict'
]
=
f
.
strict
return
tool_param
async
def
_map_user_message
(
self
,
message
:
ModelRequest
)
->
AsyncIterable
[
chat
.
ChatCompletionMessageParam
]:
for
part
in
message
.
parts
:
if
isinstance
(
part
,
SystemPromptPart
):
if
self
.
system_prompt_role
==
'developer'
:
yield
chat
.
ChatCompletionDeveloperMessageParam
(
role
=
'developer'
,
content
=
part
.
content
)
elif
self
.
system_prompt_role
==
'user'
:
yield
chat
.
ChatCompletionUserMessageParam
(
role
=
'user'
,
content
=
part
.
content
)
else
:
yield
chat
.
ChatCompletionSystemMessageParam
(
role
=
'system'
,
content
=
part
.
content
)
elif
isinstance
(
part
,
UserPromptPart
):
yield
await
self
.
_map_user_prompt
(
part
)
elif
isinstance
(
part
,
ToolReturnPart
):
yield
chat
.
ChatCompletionToolMessageParam
(
role
=
'tool'
,
tool_call_id
=
_guard_tool_call_id
(
t
=
part
),
content
=
part
.
model_response_str
(),
)
elif
isinstance
(
part
,
RetryPromptPart
):
if
part
.
tool_name
is
None
:
yield
chat
.
ChatCompletionUserMessageParam
(
# pragma: no cover
role
=
'user'
,
content
=
part
.
model_response
()
)
else
:
yield
chat
.
ChatCompletionToolMessageParam
(
role
=
'tool'
,
tool_call_id
=
_guard_tool_call_id
(
t
=
part
),
content
=
part
.
model_response
(),
)
else
:
assert_never
(
part
)
@staticmethod
async
def
_map_user_prompt
(
part
:
UserPromptPart
)
->
chat
.
ChatCompletionUserMessageParam
:
content
:
str
|
list
[
ChatCompletionContentPartParam
]
if
isinstance
(
part
.
content
,
str
):
content
=
part
.
content
else
:
content
=
[]
for
item
in
part
.
content
:
if
isinstance
(
item
,
str
):
content
.
append
(
ChatCompletionContentPartTextParam
(
text
=
item
,
type
=
'text'
))
elif
isinstance
(
item
,
ImageUrl
):
image_url
=
ImageURL
(
url
=
item
.
url
)
content
.
append
(
ChatCompletionContentPartImageParam
(
image_url
=
image_url
,
type
=
'image_url'
))
elif
isinstance
(
item
,
BinaryContent
):
base64_encoded
=
base64
.
b64encode
(
item
.
data
)
.
decode
(
'utf-8'
)
if
item
.
is_image
:
image_url
=
ImageURL
(
url
=
f
'data:
{
item
.
media_type
}
;base64,
{
base64_encoded
}
'
)
content
.
append
(
ChatCompletionContentPartImageParam
(
image_url
=
image_url
,
type
=
'image_url'
))
elif
item
.
is_audio
:
assert
item
.
format
in
(
'wav'
,
'mp3'
)
audio
=
InputAudio
(
data
=
base64_encoded
,
format
=
item
.
format
)
content
.
append
(
ChatCompletionContentPartInputAudioParam
(
input_audio
=
audio
,
type
=
'input_audio'
))
elif
item
.
is_document
:
content
.
append
(
File
(
file
=
FileFile
(
file_data
=
f
'data:
{
item
.
media_type
}
;base64,
{
base64_encoded
}
'
,
filename
=
f
'filename.
{
item
.
format
}
'
,
),
type
=
'file'
,
)
)
else
:
# pragma: no cover
raise
RuntimeError
(
f
'Unsupported binary content type:
{
item
.
media_type
}
'
)
elif
isinstance
(
item
,
AudioUrl
):
downloaded_item
=
await
download_item
(
item
,
data_format
=
'base64'
,
type_format
=
'extension'
)
assert
downloaded_item
[
'data_type'
]
in
(
'wav'
,
'mp3'
,
),
f
'Unsupported audio format:
{
downloaded_item
[
"data_type"
]
}
'
audio
=
InputAudio
(
data
=
downloaded_item
[
'data'
],
format
=
downloaded_item
[
'data_type'
])
content
.
append
(
ChatCompletionContentPartInputAudioParam
(
input_audio
=
audio
,
type
=
'input_audio'
))
elif
isinstance
(
item
,
DocumentUrl
):
downloaded_item
=
await
download_item
(
item
,
data_format
=
'base64_uri'
,
type_format
=
'extension'
)
file
=
File
(
file
=
FileFile
(
file_data
=
downloaded_item
[
'data'
],
filename
=
f
'filename.
{
downloaded_item
[
"data_type"
]
}
'
),
type
=
'file'
,
)
content
.
append
(
file
)
elif
isinstance
(
item
,
VideoUrl
):
# pragma: no cover
raise
NotImplementedError
(
'VideoUrl is not supported for OpenAI'
)
else
:
assert_never
(
item
)
return
chat
.
ChatCompletionUserMessageParam
(
role
=
'user'
,
content
=
content
)
__init__
__init__
(
model_name
:
OpenAIModelName
,
*
,
provider
:
(
Literal
[
"openai"
,
"deepseek"
,
"azure"
,
"openrouter"
,
"grok"
,
"fireworks"
,
"together"
,
"heroku"
,
"github"
,
]
|
Provider
[
AsyncOpenAI
]
)
=
"openai"
,
profile
:
ModelProfileSpec
|
None
=
None
,
system_prompt_role
:
OpenAISystemPromptRole
|
None
=
None
)
Initialize an OpenAI model.
Parameters:
Name
Type
Description
Default
model_name
OpenAIModelName
The name of the OpenAI model to use. List of model names available
here
(Unfortunately, despite being ask to do so, OpenAI do not provide
.inv
files for their API).
required
provider
Literal
['openai', 'deepseek', 'azure', 'openrouter', 'grok', 'fireworks', 'together', 'heroku', 'github'] |
Provider
[
AsyncOpenAI
]
The provider to use. Defaults to
'openai'
.
'openai'
profile
ModelProfileSpec
| None
The model profile to use. Defaults to a profile picked by the provider based on the model name.
None
system_prompt_role
OpenAISystemPromptRole
| None
The role to use for the system prompt message. If not provided, defaults to
'system'
.
In the future, this may be inferred from the model name.
None
Source code in
pydantic_ai_slim/pydantic_ai/models/openai.py
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
def
__init__
(
self
,
model_name
:
OpenAIModelName
,
*
,
provider
:
Literal
[
'openai'
,
'deepseek'
,
'azure'
,
'openrouter'
,
'grok'
,
'fireworks'
,
'together'
,
'heroku'
,
'github'
]
|
Provider
[
AsyncOpenAI
]
=
'openai'
,
profile
:
ModelProfileSpec
|
None
=
None
,
system_prompt_role
:
OpenAISystemPromptRole
|
None
=
None
,
):
"""Initialize an OpenAI model.
Args:
model_name: The name of the OpenAI model to use. List of model names available
[here](https://github.com/openai/openai-python/blob/v1.54.3/src/openai/types/chat_model.py#L7)
(Unfortunately, despite being ask to do so, OpenAI do not provide `.inv` files for their API).
provider: The provider to use. Defaults to `'openai'`.
profile: The model profile to use. Defaults to a profile picked by the provider based on the model name.
system_prompt_role: The role to use for the system prompt message. If not provided, defaults to `'system'`.
In the future, this may be inferred from the model name.
"""
self
.
_model_name
=
model_name
if
isinstance
(
provider
,
str
):
provider
=
infer_provider
(
provider
)
self
.
client
=
provider
.
client
self
.
_profile
=
profile
or
provider
.
model_profile
self
.
system_prompt_role
=
system_prompt_role
model_name
property
model_name
:
OpenAIModelName
The model name.
system
property
system
:
str
The system / model provider.
OpenAIResponsesModel
dataclass
Bases:
Model
A model that uses the OpenAI Responses API.
The
OpenAI Responses API
is the
new API for OpenAI models.
The Responses API has built-in tools, that you can use instead of building your own:
Web search
File search
Computer use
Use the
openai_builtin_tools
setting to add these tools to your model.
If you are interested in the differences between the Responses API and the Chat Completions API,
see the
OpenAI API docs
.
Source code in
pydantic_ai_slim/pydantic_ai/models/openai.py
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
@dataclass
(
init
=
False
)
class
OpenAIResponsesModel
(
Model
):
"""A model that uses the OpenAI Responses API.
The [OpenAI Responses API](https://platform.openai.com/docs/api-reference/responses) is the
new API for OpenAI models.
The Responses API has built-in tools, that you can use instead of building your own:
- [Web search](https://platform.openai.com/docs/guides/tools-web-search)
- [File search](https://platform.openai.com/docs/guides/tools-file-search)
- [Computer use](https://platform.openai.com/docs/guides/tools-computer-use)
Use the `openai_builtin_tools` setting to add these tools to your model.
If you are interested in the differences between the Responses API and the Chat Completions API,
see the [OpenAI API docs](https://platform.openai.com/docs/guides/responses-vs-chat-completions).
"""
client
:
AsyncOpenAI
=
field
(
repr
=
False
)
system_prompt_role
:
OpenAISystemPromptRole
|
None
=
field
(
default
=
None
)
_model_name
:
OpenAIModelName
=
field
(
repr
=
False
)
_system
:
str
=
field
(
default
=
'openai'
,
repr
=
False
)
def
__init__
(
self
,
model_name
:
OpenAIModelName
,
*
,
provider
:
Literal
[
'openai'
,
'deepseek'
,
'azure'
,
'openrouter'
,
'grok'
,
'fireworks'
,
'together'
]
|
Provider
[
AsyncOpenAI
]
=
'openai'
,
profile
:
ModelProfileSpec
|
None
=
None
,
):
"""Initialize an OpenAI Responses model.
Args:
model_name: The name of the OpenAI model to use.
provider: The provider to use. Defaults to `'openai'`.
profile: The model profile to use. Defaults to a profile picked by the provider based on the model name.
"""
self
.
_model_name
=
model_name
if
isinstance
(
provider
,
str
):
provider
=
infer_provider
(
provider
)
self
.
client
=
provider
.
client
self
.
_profile
=
profile
or
provider
.
model_profile
@property
def
model_name
(
self
)
->
OpenAIModelName
:
"""The model name."""
return
self
.
_model_name
@property
def
system
(
self
)
->
str
:
"""The system / model provider."""
return
self
.
_system
async
def
request
(
self
,
messages
:
list
[
ModelRequest
|
ModelResponse
],
model_settings
:
ModelSettings
|
None
,
model_request_parameters
:
ModelRequestParameters
,
)
->
ModelResponse
:
check_allow_model_requests
()
response
=
await
self
.
_responses_create
(
messages
,
False
,
cast
(
OpenAIResponsesModelSettings
,
model_settings
or
{}),
model_request_parameters
)
return
self
.
_process_response
(
response
)
@asynccontextmanager
async
def
request_stream
(
self
,
messages
:
list
[
ModelMessage
],
model_settings
:
ModelSettings
|
None
,
model_request_parameters
:
ModelRequestParameters
,
)
->
AsyncIterator
[
StreamedResponse
]:
check_allow_model_requests
()
response
=
await
self
.
_responses_create
(
messages
,
True
,
cast
(
OpenAIResponsesModelSettings
,
model_settings
or
{}),
model_request_parameters
)
async
with
response
:
yield
await
self
.
_process_streamed_response
(
response
)
def
_process_response
(
self
,
response
:
responses
.
Response
)
->
ModelResponse
:
"""Process a non-streamed response, and prepare a message to return."""
timestamp
=
number_to_datetime
(
response
.
created_at
)
items
:
list
[
ModelResponsePart
]
=
[]
for
item
in
response
.
output
:
if
item
.
type
==
'reasoning'
:
for
summary
in
item
.
summary
:
# NOTE: We use the same id for all summaries because we can merge them on the round trip.
# The providers don't force the signature to be unique.
items
.
append
(
ThinkingPart
(
content
=
summary
.
text
,
id
=
item
.
id
))
elif
item
.
type
==
'message'
:
for
content
in
item
.
content
:
if
content
.
type
==
'output_text'
:
# pragma: no branch
items
.
append
(
TextPart
(
content
.
text
))
elif
item
.
type
==
'function_call'
:
items
.
append
(
ToolCallPart
(
item
.
name
,
item
.
arguments
,
tool_call_id
=
item
.
call_id
))
return
ModelResponse
(
items
,
usage
=
_map_usage
(
response
),
model_name
=
response
.
model
,
vendor_id
=
response
.
id
,
timestamp
=
timestamp
,
)
async
def
_process_streamed_response
(
self
,
response
:
AsyncStream
[
responses
.
ResponseStreamEvent
]
)
->
OpenAIResponsesStreamedResponse
:
"""Process a streamed response, and prepare a streaming response to return."""
peekable_response
=
_utils
.
PeekableAsyncStream
(
response
)
first_chunk
=
await
peekable_response
.
peek
()
if
isinstance
(
first_chunk
,
_utils
.
Unset
):
# pragma: no cover
raise
UnexpectedModelBehavior
(
'Streamed response ended without content or tool calls'
)
assert
isinstance
(
first_chunk
,
responses
.
ResponseCreatedEvent
)
return
OpenAIResponsesStreamedResponse
(
_model_name
=
self
.
_model_name
,
_response
=
peekable_response
,
_timestamp
=
number_to_datetime
(
first_chunk
.
response
.
created_at
),
)
@overload
async
def
_responses_create
(
self
,
messages
:
list
[
ModelRequest
|
ModelResponse
],
stream
:
Literal
[
False
],
model_settings
:
OpenAIResponsesModelSettings
,
model_request_parameters
:
ModelRequestParameters
,
)
->
responses
.
Response
:
...
@overload
async
def
_responses_create
(
self
,
messages
:
list
[
ModelRequest
|
ModelResponse
],
stream
:
Literal
[
True
],
model_settings
:
OpenAIResponsesModelSettings
,
model_request_parameters
:
ModelRequestParameters
,
)
->
AsyncStream
[
responses
.
ResponseStreamEvent
]:
...
async
def
_responses_create
(
self
,
messages
:
list
[
ModelRequest
|
ModelResponse
],
stream
:
bool
,
model_settings
:
OpenAIResponsesModelSettings
,
model_request_parameters
:
ModelRequestParameters
,
)
->
responses
.
Response
|
AsyncStream
[
responses
.
ResponseStreamEvent
]:
tools
=
self
.
_get_tools
(
model_request_parameters
)
tools
=
list
(
model_settings
.
get
(
'openai_builtin_tools'
,
[]))
+
tools
if
not
tools
:
tool_choice
:
Literal
[
'none'
,
'required'
,
'auto'
]
|
None
=
None
elif
not
model_request_parameters
.
allow_text_output
:
tool_choice
=
'required'
else
:
tool_choice
=
'auto'
instructions
,
openai_messages
=
await
self
.
_map_messages
(
messages
)
reasoning
=
self
.
_get_reasoning
(
model_settings
)
text
:
responses
.
ResponseTextConfigParam
|
None
=
None
if
model_request_parameters
.
output_mode
==
'native'
:
output_object
=
model_request_parameters
.
output_object
assert
output_object
is
not
None
text
=
{
'format'
:
self
.
_map_json_schema
(
output_object
)}
elif
(
model_request_parameters
.
output_mode
==
'prompted'
and
self
.
profile
.
supports_json_object_output
):
# pragma: no branch
text
=
{
'format'
:
{
'type'
:
'json_object'
}}
# Without this trick, we'd hit this error:
# > Response input messages must contain the word 'json' in some form to use 'text.format' of type 'json_object'.
# Apparently they're only checking input messages for "JSON", not instructions.
assert
isinstance
(
instructions
,
str
)
openai_messages
.
insert
(
0
,
responses
.
EasyInputMessageParam
(
role
=
'system'
,
content
=
instructions
))
instructions
=
NOT_GIVEN
sampling_settings
=
(
model_settings
if
OpenAIModelProfile
.
from_profile
(
self
.
profile
)
.
openai_supports_sampling_settings
else
OpenAIResponsesModelSettings
()
)
try
:
extra_headers
=
model_settings
.
get
(
'extra_headers'
,
{})
extra_headers
.
setdefault
(
'User-Agent'
,
get_user_agent
())
return
await
self
.
client
.
responses
.
create
(
input
=
openai_messages
,
model
=
self
.
_model_name
,
instructions
=
instructions
,
parallel_tool_calls
=
model_settings
.
get
(
'parallel_tool_calls'
,
NOT_GIVEN
),
tools
=
tools
or
NOT_GIVEN
,
tool_choice
=
tool_choice
or
NOT_GIVEN
,
max_output_tokens
=
model_settings
.
get
(
'max_tokens'
,
NOT_GIVEN
),
stream
=
stream
,
temperature
=
sampling_settings
.
get
(
'temperature'
,
NOT_GIVEN
),
top_p
=
sampling_settings
.
get
(
'top_p'
,
NOT_GIVEN
),
truncation
=
model_settings
.
get
(
'openai_truncation'
,
NOT_GIVEN
),
timeout
=
model_settings
.
get
(
'timeout'
,
NOT_GIVEN
),
reasoning
=
reasoning
,
user
=
model_settings
.
get
(
'openai_user'
,
NOT_GIVEN
),
text
=
text
or
NOT_GIVEN
,
extra_headers
=
extra_headers
,
extra_body
=
model_settings
.
get
(
'extra_body'
),
)
except
APIStatusError
as
e
:
if
(
status_code
:=
e
.
status_code
)
>=
400
:
raise
ModelHTTPError
(
status_code
=
status_code
,
model_name
=
self
.
model_name
,
body
=
e
.
body
)
from
e
raise
# pragma: lax no cover
def
_get_reasoning
(
self
,
model_settings
:
OpenAIResponsesModelSettings
)
->
Reasoning
|
NotGiven
:
reasoning_effort
=
model_settings
.
get
(
'openai_reasoning_effort'
,
None
)
reasoning_summary
=
model_settings
.
get
(
'openai_reasoning_summary'
,
None
)
reasoning_generate_summary
=
model_settings
.
get
(
'openai_reasoning_generate_summary'
,
None
)
if
reasoning_summary
and
reasoning_generate_summary
:
# pragma: no cover
raise
ValueError
(
'`openai_reasoning_summary` and `openai_reasoning_generate_summary` cannot both be set.'
)
if
reasoning_generate_summary
is
not
None
:
# pragma: no cover
warnings
.
warn
(
'`openai_reasoning_generate_summary` is deprecated, use `openai_reasoning_summary` instead'
,
DeprecationWarning
,
)
reasoning_summary
=
reasoning_generate_summary
if
reasoning_effort
is
None
and
reasoning_summary
is
None
:
return
NOT_GIVEN
return
Reasoning
(
effort
=
reasoning_effort
,
summary
=
reasoning_summary
)
def
_get_tools
(
self
,
model_request_parameters
:
ModelRequestParameters
)
->
list
[
responses
.
FunctionToolParam
]:
tools
=
[
self
.
_map_tool_definition
(
r
)
for
r
in
model_request_parameters
.
function_tools
]
if
model_request_parameters
.
output_tools
:
tools
+=
[
self
.
_map_tool_definition
(
r
)
for
r
in
model_request_parameters
.
output_tools
]
return
tools
def
_map_tool_definition
(
self
,
f
:
ToolDefinition
)
->
responses
.
FunctionToolParam
:
return
{
'name'
:
f
.
name
,
'parameters'
:
f
.
parameters_json_schema
,
'type'
:
'function'
,
'description'
:
f
.
description
,
'strict'
:
bool
(
f
.
strict
and
OpenAIModelProfile
.
from_profile
(
self
.
profile
)
.
openai_supports_strict_tool_definition
),
}
async
def
_map_messages
(
self
,
messages
:
list
[
ModelMessage
]
)
->
tuple
[
str
|
NotGiven
,
list
[
responses
.
ResponseInputItemParam
]]:
"""Just maps a `pydantic_ai.Message` to a `openai.types.responses.ResponseInputParam`."""
openai_messages
:
list
[
responses
.
ResponseInputItemParam
]
=
[]
for
message
in
messages
:
if
isinstance
(
message
,
ModelRequest
):
for
part
in
message
.
parts
:
if
isinstance
(
part
,
SystemPromptPart
):
openai_messages
.
append
(
responses
.
EasyInputMessageParam
(
role
=
'system'
,
content
=
part
.
content
))
elif
isinstance
(
part
,
UserPromptPart
):
openai_messages
.
append
(
await
self
.
_map_user_prompt
(
part
))
elif
isinstance
(
part
,
ToolReturnPart
):
openai_messages
.
append
(
FunctionCallOutput
(
type
=
'function_call_output'
,
call_id
=
_guard_tool_call_id
(
t
=
part
),
output
=
part
.
model_response_str
(),
)
)
elif
isinstance
(
part
,
RetryPromptPart
):
# TODO(Marcelo): How do we test this conditional branch?
if
part
.
tool_name
is
None
:
# pragma: no cover
openai_messages
.
append
(
Message
(
role
=
'user'
,
content
=
[{
'type'
:
'input_text'
,
'text'
:
part
.
model_response
()}])
)
else
:
openai_messages
.
append
(
FunctionCallOutput
(
type
=
'function_call_output'
,
call_id
=
_guard_tool_call_id
(
t
=
part
),
output
=
part
.
model_response
(),
)
)
else
:
assert_never
(
part
)
elif
isinstance
(
message
,
ModelResponse
):
# last_thinking_part_idx: int | None = None
for
item
in
message
.
parts
:
if
isinstance
(
item
,
TextPart
):
openai_messages
.
append
(
responses
.
EasyInputMessageParam
(
role
=
'assistant'
,
content
=
item
.
content
))
elif
isinstance
(
item
,
ToolCallPart
):
openai_messages
.
append
(
self
.
_map_tool_call
(
item
))
elif
isinstance
(
item
,
ThinkingPart
):
# NOTE: We don't send ThinkingPart to the providers yet. If you are unsatisfied with this,
# please open an issue. The below code is the code to send thinking to the provider.
# if last_thinking_part_idx is not None:
#     reasoning_item = cast(responses.ResponseReasoningItemParam, openai_messages[last_thinking_part_idx])  # fmt: skip
#     if item.id == reasoning_item['id']:
#         assert isinstance(reasoning_item['summary'], list)
#         reasoning_item['summary'].append(Summary(text=item.content, type='summary_text'))
#         continue
# last_thinking_part_idx = len(openai_messages)
# openai_messages.append(
#     responses.ResponseReasoningItemParam(
#         id=item.id or generate_tool_call_id(),
#         summary=[Summary(text=item.content, type='summary_text')],
#         type='reasoning',
#     )
# )
pass
else
:
assert_never
(
item
)
else
:
assert_never
(
message
)
instructions
=
self
.
_get_instructions
(
messages
)
or
NOT_GIVEN
return
instructions
,
openai_messages
@staticmethod
def
_map_tool_call
(
t
:
ToolCallPart
)
->
responses
.
ResponseFunctionToolCallParam
:
return
responses
.
ResponseFunctionToolCallParam
(
arguments
=
t
.
args_as_json_str
(),
call_id
=
_guard_tool_call_id
(
t
=
t
),
name
=
t
.
tool_name
,
type
=
'function_call'
,
)
def
_map_json_schema
(
self
,
o
:
OutputObjectDefinition
)
->
responses
.
ResponseFormatTextJSONSchemaConfigParam
:
response_format_param
:
responses
.
ResponseFormatTextJSONSchemaConfigParam
=
{
'type'
:
'json_schema'
,
'name'
:
o
.
name
or
DEFAULT_OUTPUT_TOOL_NAME
,
'schema'
:
o
.
json_schema
,
}
if
o
.
description
:
response_format_param
[
'description'
]
=
o
.
description
if
OpenAIModelProfile
.
from_profile
(
self
.
profile
)
.
openai_supports_strict_tool_definition
:
# pragma: no branch
response_format_param
[
'strict'
]
=
o
.
strict
return
response_format_param
@staticmethod
async
def
_map_user_prompt
(
part
:
UserPromptPart
)
->
responses
.
EasyInputMessageParam
:
content
:
str
|
list
[
responses
.
ResponseInputContentParam
]
if
isinstance
(
part
.
content
,
str
):
content
=
part
.
content
else
:
content
=
[]
for
item
in
part
.
content
:
if
isinstance
(
item
,
str
):
content
.
append
(
responses
.
ResponseInputTextParam
(
text
=
item
,
type
=
'input_text'
))
elif
isinstance
(
item
,
BinaryContent
):
base64_encoded
=
base64
.
b64encode
(
item
.
data
)
.
decode
(
'utf-8'
)
if
item
.
is_image
:
content
.
append
(
responses
.
ResponseInputImageParam
(
image_url
=
f
'data:
{
item
.
media_type
}
;base64,
{
base64_encoded
}
'
,
type
=
'input_image'
,
detail
=
'auto'
,
)
)
elif
item
.
is_document
:
content
.
append
(
responses
.
ResponseInputFileParam
(
type
=
'input_file'
,
file_data
=
f
'data:
{
item
.
media_type
}
;base64,
{
base64_encoded
}
'
,
# NOTE: Type wise it's not necessary to include the filename, but it's required by the
# API itself. If we add empty string, the server sends a 500 error - which OpenAI needs
# to fix. In any case, we add a placeholder name.
filename
=
f
'filename.
{
item
.
format
}
'
,
)
)
elif
item
.
is_audio
:
raise
NotImplementedError
(
'Audio as binary content is not supported for OpenAI Responses API.'
)
else
:
# pragma: no cover
raise
RuntimeError
(
f
'Unsupported binary content type:
{
item
.
media_type
}
'
)
elif
isinstance
(
item
,
ImageUrl
):
content
.
append
(
responses
.
ResponseInputImageParam
(
image_url
=
item
.
url
,
type
=
'input_image'
,
detail
=
'auto'
)
)
elif
isinstance
(
item
,
AudioUrl
):
# pragma: no cover
downloaded_item
=
await
download_item
(
item
,
data_format
=
'base64_uri'
,
type_format
=
'extension'
)
content
.
append
(
responses
.
ResponseInputFileParam
(
type
=
'input_file'
,
file_data
=
downloaded_item
[
'data'
],
filename
=
f
'filename.
{
downloaded_item
[
"data_type"
]
}
'
,
)
)
elif
isinstance
(
item
,
DocumentUrl
):
downloaded_item
=
await
download_item
(
item
,
data_format
=
'base64_uri'
,
type_format
=
'extension'
)
content
.
append
(
responses
.
ResponseInputFileParam
(
type
=
'input_file'
,
file_data
=
downloaded_item
[
'data'
],
filename
=
f
'filename.
{
downloaded_item
[
"data_type"
]
}
'
,
)
)
elif
isinstance
(
item
,
VideoUrl
):
# pragma: no cover
raise
NotImplementedError
(
'VideoUrl is not supported for OpenAI.'
)
else
:
assert_never
(
item
)
return
responses
.
EasyInputMessageParam
(
role
=
'user'
,
content
=
content
)
__init__
__init__
(
model_name
:
OpenAIModelName
,
*
,
provider
:
(
Literal
[
"openai"
,
"deepseek"
,
"azure"
,
"openrouter"
,
"grok"
,
"fireworks"
,
"together"
,
]
|
Provider
[
AsyncOpenAI
]
)
=
"openai"
,
profile
:
ModelProfileSpec
|
None
=
None
)
Initialize an OpenAI Responses model.
Parameters:
Name
Type
Description
Default
model_name
OpenAIModelName
The name of the OpenAI model to use.
required
provider
Literal
['openai', 'deepseek', 'azure', 'openrouter', 'grok', 'fireworks', 'together'] |
Provider
[
AsyncOpenAI
]
The provider to use. Defaults to
'openai'
.
'openai'
profile
ModelProfileSpec
| None
The model profile to use. Defaults to a profile picked by the provider based on the model name.
None
Source code in
pydantic_ai_slim/pydantic_ai/models/openai.py
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
def
__init__
(
self
,
model_name
:
OpenAIModelName
,
*
,
provider
:
Literal
[
'openai'
,
'deepseek'
,
'azure'
,
'openrouter'
,
'grok'
,
'fireworks'
,
'together'
]
|
Provider
[
AsyncOpenAI
]
=
'openai'
,
profile
:
ModelProfileSpec
|
None
=
None
,
):
"""Initialize an OpenAI Responses model.
Args:
model_name: The name of the OpenAI model to use.
provider: The provider to use. Defaults to `'openai'`.
profile: The model profile to use. Defaults to a profile picked by the provider based on the model name.
"""
self
.
_model_name
=
model_name
if
isinstance
(
provider
,
str
):
provider
=
infer_provider
(
provider
)
self
.
client
=
provider
.
client
self
.
_profile
=
profile
or
provider
.
model_profile
model_name
property
model_name
:
OpenAIModelName
The model name.
system
property
system
:
str
The system / model provider.