PydanticAI
pydantic/pydantic-ai
Introduction
Installation
Getting Help
Contributing
Troubleshooting
Upgrade Guide
Documentation
Documentation
Agents
Models
Models
OpenAI
Anthropic
Gemini
Google
Bedrock
Cohere
Groq
Mistral
Dependencies
Function Tools
Common Tools
Output
Messages and chat history
Unit testing
Debugging and Monitoring
Multi-agent Applications
Graphs
Evals
Image, Audio, Video & Document Input
Thinking
Direct Model Requests
MCP
MCP
Client
Server
MCP Run Python
A2A
Command Line Interface (CLI)
Examples
Examples
Pydantic Model
Weather agent
Bank support
SQL Generation
Flight booking
RAG
Stream markdown
Stream whales
Chat App with FastAPI
Question Graph
Slack Lead Qualifier with Modal
API Reference
API Reference
pydantic_ai.agent
pydantic_ai.tools
pydantic_ai.common_tools
pydantic_ai.output
pydantic_ai.result
pydantic_ai.messages
pydantic_ai.exceptions
pydantic_ai.settings
pydantic_ai.usage
pydantic_ai.mcp
pydantic_ai.format_as_xml
pydantic_ai.format_prompt
pydantic_ai.format_prompt
Table of contents
format_prompt
format_as_xml
pydantic_ai.direct
pydantic_ai.models
pydantic_ai.models.openai
pydantic_ai.models.anthropic
pydantic_ai.models.bedrock
pydantic_ai.models.cohere
pydantic_ai.models.gemini
pydantic_ai.models.google
pydantic_ai.models.groq
pydantic_ai.models.instrumented
pydantic_ai.models.mistral
pydantic_ai.models.test
pydantic_ai.models.function
pydantic_ai.models.fallback
pydantic_ai.models.wrapper
pydantic_ai.models.mcp_sampling
pydantic_ai.profiles
pydantic_ai.providers
pydantic_graph
pydantic_graph.nodes
pydantic_graph.persistence
pydantic_graph.mermaid
pydantic_graph.exceptions
pydantic_evals.dataset
pydantic_evals.evaluators
pydantic_evals.reporting
pydantic_evals.otel
pydantic_evals.generation
fasta2a
Table of contents
format_prompt
format_as_xml
pydantic_ai.format_prompt
format_as_xml
format_as_xml
(
obj
:
Any
,
root_tag
:
str
=
"examples"
,
item_tag
:
str
=
"example"
,
include_root_tag
:
bool
=
True
,
none_str
:
str
=
"null"
,
indent
:
str
|
None
=
"  "
,
)
->
str
Format a Python object as XML.
This is useful since LLMs often find it easier to read semi-structured data (e.g. examples) as XML,
rather than JSON etc.
Supports:
str
,
bytes
,
bytearray
,
bool
,
int
,
float
,
date
,
datetime
,
Mapping
,
Iterable
,
dataclass
, and
BaseModel
.
Parameters:
Name
Type
Description
Default
obj
Any
Python Object to serialize to XML.
required
root_tag
str
Outer tag to wrap the XML in, use
None
to omit the outer tag.
'examples'
item_tag
str
Tag to use for each item in an iterable (e.g. list), this is overridden by the class name
for dataclasses and Pydantic models.
'example'
include_root_tag
bool
Whether to include the root tag in the output
(The root tag is always included if it includes a body - e.g. when the input is a simple value).
True
none_str
str
String to use for
None
values.
'null'
indent
str
| None
Indentation string to use for pretty printing.
'  '
Returns:
Type
Description
str
XML representation of the object.
Example:
format_as_xml_example.py
from
pydantic_ai
import
format_as_xml
print
(
format_as_xml
({
'name'
:
'John'
,
'height'
:
6
,
'weight'
:
200
},
root_tag
=
'user'
))
'''
<user>
<name>John</name>
<height>6</height>
<weight>200</weight>
</user>
'''
Source code in
pydantic_ai_slim/pydantic_ai/format_prompt.py
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
def
format_as_xml
(
obj
:
Any
,
root_tag
:
str
=
'examples'
,
item_tag
:
str
=
'example'
,
include_root_tag
:
bool
=
True
,
none_str
:
str
=
'null'
,
indent
:
str
|
None
=
'  '
,
)
->
str
:
"""Format a Python object as XML.
This is useful since LLMs often find it easier to read semi-structured data (e.g. examples) as XML,
rather than JSON etc.
Supports: `str`, `bytes`, `bytearray`, `bool`, `int`, `float`, `date`, `datetime`, `Mapping`,
`Iterable`, `dataclass`, and `BaseModel`.
Args:
obj: Python Object to serialize to XML.
root_tag: Outer tag to wrap the XML in, use `None` to omit the outer tag.
item_tag: Tag to use for each item in an iterable (e.g. list), this is overridden by the class name
for dataclasses and Pydantic models.
include_root_tag: Whether to include the root tag in the output
(The root tag is always included if it includes a body - e.g. when the input is a simple value).
none_str: String to use for `None` values.
indent: Indentation string to use for pretty printing.
Returns:
XML representation of the object.
Example:
```python {title="format_as_xml_example.py" lint="skip"}
from pydantic_ai import format_as_xml
print(format_as_xml({'name': 'John', 'height': 6, 'weight': 200}, root_tag='user'))
'''
<user>
<name>John</name>
<height>6</height>
<weight>200</weight>
</user>
'''
```
"""
el
=
_ToXml
(
item_tag
=
item_tag
,
none_str
=
none_str
)
.
to_xml
(
obj
,
root_tag
)
if
not
include_root_tag
and
el
.
text
is
None
:
join
=
''
if
indent
is
None
else
'
\n
'
return
join
.
join
(
_rootless_xml_elements
(
el
,
indent
))
else
:
if
indent
is
not
None
:
ElementTree
.
indent
(
el
,
space
=
indent
)
return
ElementTree
.
tostring
(
el
,
encoding
=
'unicode'
)