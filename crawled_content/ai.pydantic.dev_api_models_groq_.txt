PydanticAI
pydantic/pydantic-ai
Introduction
Installation
Getting Help
Contributing
Troubleshooting
Upgrade Guide
Documentation
Documentation
Agents
Models
Models
OpenAI
Anthropic
Gemini
Google
Bedrock
Cohere
Groq
Mistral
Dependencies
Function Tools
Common Tools
Output
Messages and chat history
Unit testing
Debugging and Monitoring
Multi-agent Applications
Graphs
Evals
Image, Audio, Video & Document Input
Thinking
Direct Model Requests
MCP
MCP
Client
Server
MCP Run Python
A2A
Command Line Interface (CLI)
Examples
Examples
Pydantic Model
Weather agent
Bank support
SQL Generation
Flight booking
RAG
Stream markdown
Stream whales
Chat App with FastAPI
Question Graph
Slack Lead Qualifier with Modal
API Reference
API Reference
pydantic_ai.agent
pydantic_ai.tools
pydantic_ai.common_tools
pydantic_ai.output
pydantic_ai.result
pydantic_ai.messages
pydantic_ai.exceptions
pydantic_ai.settings
pydantic_ai.usage
pydantic_ai.mcp
pydantic_ai.format_as_xml
pydantic_ai.format_prompt
pydantic_ai.direct
pydantic_ai.models
pydantic_ai.models.openai
pydantic_ai.models.anthropic
pydantic_ai.models.bedrock
pydantic_ai.models.cohere
pydantic_ai.models.gemini
pydantic_ai.models.google
pydantic_ai.models.groq
pydantic_ai.models.groq
Table of contents
Setup
groq
ProductionGroqModelNames
PreviewGroqModelNames
GroqModelName
GroqModelSettings
GroqModel
__init__
model_name
system
GroqStreamedResponse
model_name
timestamp
pydantic_ai.models.instrumented
pydantic_ai.models.mistral
pydantic_ai.models.test
pydantic_ai.models.function
pydantic_ai.models.fallback
pydantic_ai.models.wrapper
pydantic_ai.models.mcp_sampling
pydantic_ai.profiles
pydantic_ai.providers
pydantic_graph
pydantic_graph.nodes
pydantic_graph.persistence
pydantic_graph.mermaid
pydantic_graph.exceptions
pydantic_evals.dataset
pydantic_evals.evaluators
pydantic_evals.reporting
pydantic_evals.otel
pydantic_evals.generation
fasta2a
Table of contents
Setup
groq
ProductionGroqModelNames
PreviewGroqModelNames
GroqModelName
GroqModelSettings
GroqModel
__init__
model_name
system
GroqStreamedResponse
model_name
timestamp
pydantic_ai.models.groq
Setup
For details on how to set up authentication with this model, see
model configuration for Groq
.
ProductionGroqModelNames
module-attribute
ProductionGroqModelNames
=
Literal
[
"distil-whisper-large-v3-en"
,
"gemma2-9b-it"
,
"llama-3.3-70b-versatile"
,
"llama-3.1-8b-instant"
,
"llama-guard-3-8b"
,
"llama3-70b-8192"
,
"llama3-8b-8192"
,
"whisper-large-v3"
,
"whisper-large-v3-turbo"
,
]
Production Groq models from
https://console.groq.com/docs/models#production-models
.
PreviewGroqModelNames
module-attribute
PreviewGroqModelNames
=
Literal
[
"playai-tts"
,
"playai-tts-arabic"
,
"qwen-qwq-32b"
,
"mistral-saba-24b"
,
"qwen-2.5-coder-32b"
,
"qwen-2.5-32b"
,
"deepseek-r1-distill-qwen-32b"
,
"deepseek-r1-distill-llama-70b"
,
"llama-3.3-70b-specdec"
,
"llama-3.2-1b-preview"
,
"llama-3.2-3b-preview"
,
"llama-3.2-11b-vision-preview"
,
"llama-3.2-90b-vision-preview"
,
]
Preview Groq models from
https://console.groq.com/docs/models#preview-models
.
GroqModelName
module-attribute
GroqModelName
=
Union
[
str
,
ProductionGroqModelNames
,
PreviewGroqModelNames
]
Possible Groq model names.
Since Groq supports a variety of models and the list changes frequencly, we explicitly list the named models as of 2025-03-31
but allow any name in the type hints.
See
https://console.groq.com/docs/models
for an up to date date list of models and more details.
GroqModelSettings
Bases:
ModelSettings
Settings used for a Groq model request.
Source code in
pydantic_ai_slim/pydantic_ai/models/groq.py
95
96
97
98
99
100
class
GroqModelSettings
(
ModelSettings
,
total
=
False
):
"""Settings used for a Groq model request."""
# ALL FIELDS MUST BE `groq_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.
groq_reasoning_format
:
Literal
[
'hidden'
,
'raw'
,
'parsed'
]
GroqModel
dataclass
Bases:
Model
A model that uses the Groq API.
Internally, this uses the
Groq Python client
to interact with the API.
Apart from
__init__
, all methods are private or match those of the base class.
Source code in
pydantic_ai_slim/pydantic_ai/models/groq.py
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
@dataclass
(
init
=
False
)
class
GroqModel
(
Model
):
"""A model that uses the Groq API.
Internally, this uses the [Groq Python client](https://github.com/groq/groq-python) to interact with the API.
Apart from `__init__`, all methods are private or match those of the base class.
"""
client
:
AsyncGroq
=
field
(
repr
=
False
)
_model_name
:
GroqModelName
=
field
(
repr
=
False
)
_system
:
str
=
field
(
default
=
'groq'
,
repr
=
False
)
def
__init__
(
self
,
model_name
:
GroqModelName
,
*
,
provider
:
Literal
[
'groq'
]
|
Provider
[
AsyncGroq
]
=
'groq'
,
profile
:
ModelProfileSpec
|
None
=
None
,
):
"""Initialize a Groq model.
Args:
model_name: The name of the Groq model to use. List of model names available
[here](https://console.groq.com/docs/models).
provider: The provider to use for authentication and API access. Can be either the string
'groq' or an instance of `Provider[AsyncGroq]`. If not provided, a new provider will be
created using the other parameters.
profile: The model profile to use. Defaults to a profile picked by the provider based on the model name.
"""
self
.
_model_name
=
model_name
if
isinstance
(
provider
,
str
):
provider
=
infer_provider
(
provider
)
self
.
client
=
provider
.
client
self
.
_profile
=
profile
or
provider
.
model_profile
@property
def
base_url
(
self
)
->
str
:
return
str
(
self
.
client
.
base_url
)
async
def
request
(
self
,
messages
:
list
[
ModelMessage
],
model_settings
:
ModelSettings
|
None
,
model_request_parameters
:
ModelRequestParameters
,
)
->
ModelResponse
:
check_allow_model_requests
()
response
=
await
self
.
_completions_create
(
messages
,
False
,
cast
(
GroqModelSettings
,
model_settings
or
{}),
model_request_parameters
)
model_response
=
self
.
_process_response
(
response
)
model_response
.
usage
.
requests
=
1
return
model_response
@asynccontextmanager
async
def
request_stream
(
self
,
messages
:
list
[
ModelMessage
],
model_settings
:
ModelSettings
|
None
,
model_request_parameters
:
ModelRequestParameters
,
)
->
AsyncIterator
[
StreamedResponse
]:
check_allow_model_requests
()
response
=
await
self
.
_completions_create
(
messages
,
True
,
cast
(
GroqModelSettings
,
model_settings
or
{}),
model_request_parameters
)
async
with
response
:
yield
await
self
.
_process_streamed_response
(
response
)
@property
def
model_name
(
self
)
->
GroqModelName
:
"""The model name."""
return
self
.
_model_name
@property
def
system
(
self
)
->
str
:
"""The system / model provider."""
return
self
.
_system
@overload
async
def
_completions_create
(
self
,
messages
:
list
[
ModelMessage
],
stream
:
Literal
[
True
],
model_settings
:
GroqModelSettings
,
model_request_parameters
:
ModelRequestParameters
,
)
->
AsyncStream
[
chat
.
ChatCompletionChunk
]:
pass
@overload
async
def
_completions_create
(
self
,
messages
:
list
[
ModelMessage
],
stream
:
Literal
[
False
],
model_settings
:
GroqModelSettings
,
model_request_parameters
:
ModelRequestParameters
,
)
->
chat
.
ChatCompletion
:
pass
async
def
_completions_create
(
self
,
messages
:
list
[
ModelMessage
],
stream
:
bool
,
model_settings
:
GroqModelSettings
,
model_request_parameters
:
ModelRequestParameters
,
)
->
chat
.
ChatCompletion
|
AsyncStream
[
chat
.
ChatCompletionChunk
]:
tools
=
self
.
_get_tools
(
model_request_parameters
)
# standalone function to make it easier to override
if
not
tools
:
tool_choice
:
Literal
[
'none'
,
'required'
,
'auto'
]
|
None
=
None
elif
not
model_request_parameters
.
allow_text_output
:
tool_choice
=
'required'
else
:
tool_choice
=
'auto'
groq_messages
=
self
.
_map_messages
(
messages
)
try
:
extra_headers
=
model_settings
.
get
(
'extra_headers'
,
{})
extra_headers
.
setdefault
(
'User-Agent'
,
get_user_agent
())
return
await
self
.
client
.
chat
.
completions
.
create
(
model
=
str
(
self
.
_model_name
),
messages
=
groq_messages
,
n
=
1
,
parallel_tool_calls
=
model_settings
.
get
(
'parallel_tool_calls'
,
NOT_GIVEN
),
tools
=
tools
or
NOT_GIVEN
,
tool_choice
=
tool_choice
or
NOT_GIVEN
,
stop
=
model_settings
.
get
(
'stop_sequences'
,
NOT_GIVEN
),
stream
=
stream
,
max_tokens
=
model_settings
.
get
(
'max_tokens'
,
NOT_GIVEN
),
temperature
=
model_settings
.
get
(
'temperature'
,
NOT_GIVEN
),
top_p
=
model_settings
.
get
(
'top_p'
,
NOT_GIVEN
),
timeout
=
model_settings
.
get
(
'timeout'
,
NOT_GIVEN
),
seed
=
model_settings
.
get
(
'seed'
,
NOT_GIVEN
),
presence_penalty
=
model_settings
.
get
(
'presence_penalty'
,
NOT_GIVEN
),
reasoning_format
=
model_settings
.
get
(
'groq_reasoning_format'
,
NOT_GIVEN
),
frequency_penalty
=
model_settings
.
get
(
'frequency_penalty'
,
NOT_GIVEN
),
logit_bias
=
model_settings
.
get
(
'logit_bias'
,
NOT_GIVEN
),
extra_headers
=
extra_headers
,
extra_body
=
model_settings
.
get
(
'extra_body'
),
)
except
APIStatusError
as
e
:
if
(
status_code
:=
e
.
status_code
)
>=
400
:
raise
ModelHTTPError
(
status_code
=
status_code
,
model_name
=
self
.
model_name
,
body
=
e
.
body
)
from
e
raise
# pragma: lax no cover
def
_process_response
(
self
,
response
:
chat
.
ChatCompletion
)
->
ModelResponse
:
"""Process a non-streamed response, and prepare a message to return."""
timestamp
=
number_to_datetime
(
response
.
created
)
choice
=
response
.
choices
[
0
]
items
:
list
[
ModelResponsePart
]
=
[]
# NOTE: The `reasoning` field is only present if `groq_reasoning_format` is set to `parsed`.
if
choice
.
message
.
reasoning
is
not
None
:
items
.
append
(
ThinkingPart
(
content
=
choice
.
message
.
reasoning
))
if
choice
.
message
.
content
is
not
None
:
# NOTE: The `<think>` tag is only present if `groq_reasoning_format` is set to `raw`.
items
.
extend
(
split_content_into_text_and_thinking
(
choice
.
message
.
content
))
if
choice
.
message
.
tool_calls
is
not
None
:
for
c
in
choice
.
message
.
tool_calls
:
items
.
append
(
ToolCallPart
(
tool_name
=
c
.
function
.
name
,
args
=
c
.
function
.
arguments
,
tool_call_id
=
c
.
id
))
return
ModelResponse
(
items
,
usage
=
_map_usage
(
response
),
model_name
=
response
.
model
,
timestamp
=
timestamp
,
vendor_id
=
response
.
id
)
async
def
_process_streamed_response
(
self
,
response
:
AsyncStream
[
chat
.
ChatCompletionChunk
])
->
GroqStreamedResponse
:
"""Process a streamed response, and prepare a streaming response to return."""
peekable_response
=
_utils
.
PeekableAsyncStream
(
response
)
first_chunk
=
await
peekable_response
.
peek
()
if
isinstance
(
first_chunk
,
_utils
.
Unset
):
raise
UnexpectedModelBehavior
(
# pragma: no cover
'Streamed response ended without content or tool calls'
)
return
GroqStreamedResponse
(
_response
=
peekable_response
,
_model_name
=
self
.
_model_name
,
_timestamp
=
number_to_datetime
(
first_chunk
.
created
),
)
def
_get_tools
(
self
,
model_request_parameters
:
ModelRequestParameters
)
->
list
[
chat
.
ChatCompletionToolParam
]:
tools
=
[
self
.
_map_tool_definition
(
r
)
for
r
in
model_request_parameters
.
function_tools
]
if
model_request_parameters
.
output_tools
:
tools
+=
[
self
.
_map_tool_definition
(
r
)
for
r
in
model_request_parameters
.
output_tools
]
return
tools
def
_map_messages
(
self
,
messages
:
list
[
ModelMessage
])
->
list
[
chat
.
ChatCompletionMessageParam
]:
"""Just maps a `pydantic_ai.Message` to a `groq.types.ChatCompletionMessageParam`."""
groq_messages
:
list
[
chat
.
ChatCompletionMessageParam
]
=
[]
for
message
in
messages
:
if
isinstance
(
message
,
ModelRequest
):
groq_messages
.
extend
(
self
.
_map_user_message
(
message
))
elif
isinstance
(
message
,
ModelResponse
):
texts
:
list
[
str
]
=
[]
tool_calls
:
list
[
chat
.
ChatCompletionMessageToolCallParam
]
=
[]
for
item
in
message
.
parts
:
if
isinstance
(
item
,
TextPart
):
texts
.
append
(
item
.
content
)
elif
isinstance
(
item
,
ToolCallPart
):
tool_calls
.
append
(
self
.
_map_tool_call
(
item
))
elif
isinstance
(
item
,
ThinkingPart
):
# Skip thinking parts when mapping to Groq messages
continue
else
:
assert_never
(
item
)
message_param
=
chat
.
ChatCompletionAssistantMessageParam
(
role
=
'assistant'
)
if
texts
:
# Note: model responses from this model should only have one text item, so the following
# shouldn't merge multiple texts into one unless you switch models between runs:
message_param
[
'content'
]
=
'
\n\n
'
.
join
(
texts
)
if
tool_calls
:
message_param
[
'tool_calls'
]
=
tool_calls
groq_messages
.
append
(
message_param
)
else
:
assert_never
(
message
)
if
instructions
:=
self
.
_get_instructions
(
messages
):
groq_messages
.
insert
(
0
,
chat
.
ChatCompletionSystemMessageParam
(
role
=
'system'
,
content
=
instructions
))
return
groq_messages
@staticmethod
def
_map_tool_call
(
t
:
ToolCallPart
)
->
chat
.
ChatCompletionMessageToolCallParam
:
return
chat
.
ChatCompletionMessageToolCallParam
(
id
=
_guard_tool_call_id
(
t
=
t
),
type
=
'function'
,
function
=
{
'name'
:
t
.
tool_name
,
'arguments'
:
t
.
args_as_json_str
()},
)
@staticmethod
def
_map_tool_definition
(
f
:
ToolDefinition
)
->
chat
.
ChatCompletionToolParam
:
return
{
'type'
:
'function'
,
'function'
:
{
'name'
:
f
.
name
,
'description'
:
f
.
description
or
''
,
'parameters'
:
f
.
parameters_json_schema
,
},
}
@classmethod
def
_map_user_message
(
cls
,
message
:
ModelRequest
)
->
Iterable
[
chat
.
ChatCompletionMessageParam
]:
for
part
in
message
.
parts
:
if
isinstance
(
part
,
SystemPromptPart
):
yield
chat
.
ChatCompletionSystemMessageParam
(
role
=
'system'
,
content
=
part
.
content
)
elif
isinstance
(
part
,
UserPromptPart
):
yield
cls
.
_map_user_prompt
(
part
)
elif
isinstance
(
part
,
ToolReturnPart
):
yield
chat
.
ChatCompletionToolMessageParam
(
role
=
'tool'
,
tool_call_id
=
_guard_tool_call_id
(
t
=
part
),
content
=
part
.
model_response_str
(),
)
elif
isinstance
(
part
,
RetryPromptPart
):
# pragma: no branch
if
part
.
tool_name
is
None
:
yield
chat
.
ChatCompletionUserMessageParam
(
# pragma: no cover
role
=
'user'
,
content
=
part
.
model_response
()
)
else
:
yield
chat
.
ChatCompletionToolMessageParam
(
role
=
'tool'
,
tool_call_id
=
_guard_tool_call_id
(
t
=
part
),
content
=
part
.
model_response
(),
)
@staticmethod
def
_map_user_prompt
(
part
:
UserPromptPart
)
->
chat
.
ChatCompletionUserMessageParam
:
content
:
str
|
list
[
chat
.
ChatCompletionContentPartParam
]
if
isinstance
(
part
.
content
,
str
):
content
=
part
.
content
else
:
content
=
[]
for
item
in
part
.
content
:
if
isinstance
(
item
,
str
):
content
.
append
(
chat
.
ChatCompletionContentPartTextParam
(
text
=
item
,
type
=
'text'
))
elif
isinstance
(
item
,
ImageUrl
):
image_url
=
ImageURL
(
url
=
item
.
url
)
content
.
append
(
chat
.
ChatCompletionContentPartImageParam
(
image_url
=
image_url
,
type
=
'image_url'
))
elif
isinstance
(
item
,
BinaryContent
):
base64_encoded
=
base64
.
b64encode
(
item
.
data
)
.
decode
(
'utf-8'
)
if
item
.
is_image
:
image_url
=
ImageURL
(
url
=
f
'data:
{
item
.
media_type
}
;base64,
{
base64_encoded
}
'
)
content
.
append
(
chat
.
ChatCompletionContentPartImageParam
(
image_url
=
image_url
,
type
=
'image_url'
))
else
:
raise
RuntimeError
(
'Only images are supported for binary content in Groq.'
)
elif
isinstance
(
item
,
DocumentUrl
):
# pragma: no cover
raise
RuntimeError
(
'DocumentUrl is not supported in Groq.'
)
else
:
# pragma: no cover
raise
RuntimeError
(
f
'Unsupported content type:
{
type
(
item
)
}
'
)
return
chat
.
ChatCompletionUserMessageParam
(
role
=
'user'
,
content
=
content
)
__init__
__init__
(
model_name
:
GroqModelName
,
*
,
provider
:
(
Literal
[
"groq"
]
|
Provider
[
AsyncGroq
]
)
=
"groq"
,
profile
:
ModelProfileSpec
|
None
=
None
)
Initialize a Groq model.
Parameters:
Name
Type
Description
Default
model_name
GroqModelName
The name of the Groq model to use. List of model names available
here
.
required
provider
Literal
['groq'] |
Provider
[
AsyncGroq
]
The provider to use for authentication and API access. Can be either the string
'groq' or an instance of
Provider[AsyncGroq]
. If not provided, a new provider will be
created using the other parameters.
'groq'
profile
ModelProfileSpec
| None
The model profile to use. Defaults to a profile picked by the provider based on the model name.
None
Source code in
pydantic_ai_slim/pydantic_ai/models/groq.py
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
def
__init__
(
self
,
model_name
:
GroqModelName
,
*
,
provider
:
Literal
[
'groq'
]
|
Provider
[
AsyncGroq
]
=
'groq'
,
profile
:
ModelProfileSpec
|
None
=
None
,
):
"""Initialize a Groq model.
Args:
model_name: The name of the Groq model to use. List of model names available
[here](https://console.groq.com/docs/models).
provider: The provider to use for authentication and API access. Can be either the string
'groq' or an instance of `Provider[AsyncGroq]`. If not provided, a new provider will be
created using the other parameters.
profile: The model profile to use. Defaults to a profile picked by the provider based on the model name.
"""
self
.
_model_name
=
model_name
if
isinstance
(
provider
,
str
):
provider
=
infer_provider
(
provider
)
self
.
client
=
provider
.
client
self
.
_profile
=
profile
or
provider
.
model_profile
model_name
property
model_name
:
GroqModelName
The model name.
system
property
system
:
str
The system / model provider.
GroqStreamedResponse
dataclass
Bases:
StreamedResponse
Implementation of
StreamedResponse
for Groq models.
Source code in
pydantic_ai_slim/pydantic_ai/models/groq.py
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
@dataclass
class
GroqStreamedResponse
(
StreamedResponse
):
"""Implementation of `StreamedResponse` for Groq models."""
_model_name
:
GroqModelName
_response
:
AsyncIterable
[
chat
.
ChatCompletionChunk
]
_timestamp
:
datetime
async
def
_get_event_iterator
(
self
)
->
AsyncIterator
[
ModelResponseStreamEvent
]:
async
for
chunk
in
self
.
_response
:
self
.
_usage
+=
_map_usage
(
chunk
)
try
:
choice
=
chunk
.
choices
[
0
]
except
IndexError
:
continue
# Handle the text part of the response
content
=
choice
.
delta
.
content
if
content
is
not
None
:
yield
self
.
_parts_manager
.
handle_text_delta
(
vendor_part_id
=
'content'
,
content
=
content
)
# Handle the tool calls
for
dtc
in
choice
.
delta
.
tool_calls
or
[]:
maybe_event
=
self
.
_parts_manager
.
handle_tool_call_delta
(
vendor_part_id
=
dtc
.
index
,
tool_name
=
dtc
.
function
and
dtc
.
function
.
name
,
args
=
dtc
.
function
and
dtc
.
function
.
arguments
,
tool_call_id
=
dtc
.
id
,
)
if
maybe_event
is
not
None
:
yield
maybe_event
@property
def
model_name
(
self
)
->
GroqModelName
:
"""Get the model name of the response."""
return
self
.
_model_name
@property
def
timestamp
(
self
)
->
datetime
:
"""Get the timestamp of the response."""
return
self
.
_timestamp
model_name
property
model_name
:
GroqModelName
Get the model name of the response.
timestamp
property
timestamp
:
datetime
Get the timestamp of the response.